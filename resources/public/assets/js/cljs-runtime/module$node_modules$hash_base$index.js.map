{
"version":3,
"file":"module$node_modules$hash_base$index.js",
"lineCount":77,
"mappings":"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",
"sources":["node_modules/hash-base/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$hash_base$index\"] = function(global,require,module,exports) {\n'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nfunction throwIfNotStringOrBuffer (val, prefix) {\n  if (!Buffer.isBuffer(val) && typeof val !== 'string') {\n    throw new TypeError(prefix + ' must be a string or a buffer')\n  }\n}\n\nfunction HashBase (blockSize) {\n  Transform.call(this)\n\n  this._block = Buffer.allocUnsafe(blockSize)\n  this._blockSize = blockSize\n  this._blockOffset = 0\n  this._length = [0, 0, 0, 0]\n\n  this._finalized = false\n}\n\ninherits(HashBase, Transform)\n\nHashBase.prototype._transform = function (chunk, encoding, callback) {\n  var error = null\n  try {\n    this.update(chunk, encoding)\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype._flush = function (callback) {\n  var error = null\n  try {\n    this.push(this.digest())\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype.update = function (data, encoding) {\n  throwIfNotStringOrBuffer(data, 'Data')\n  if (this._finalized) throw new Error('Digest already called')\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n  // consume data\n  var block = this._block\n  var offset = 0\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\n    this._update()\n    this._blockOffset = 0\n  }\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n  // update length\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n    this._length[j] += carry\n    carry = (this._length[j] / 0x0100000000) | 0\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\n  }\n\n  return this\n}\n\nHashBase.prototype._update = function () {\n  throw new Error('_update is not implemented')\n}\n\nHashBase.prototype.digest = function (encoding) {\n  if (this._finalized) throw new Error('Digest already called')\n  this._finalized = true\n\n  var digest = this._digest()\n  if (encoding !== undefined) digest = digest.toString(encoding)\n\n  // reset state\n  this._block.fill(0)\n  this._blockOffset = 0\n  for (var i = 0; i < 4; ++i) this._length[i] = 0\n\n  return digest\n}\n\nHashBase.prototype._digest = function () {\n  throw new Error('_digest is not implemented')\n}\n\nmodule.exports = HashBase\n\n};"],
"names":["shadow$provide","global","require","module","exports","HashBase","blockSize","Transform","call","_block","Buffer","allocUnsafe","_blockSize","_blockOffset","_length","_finalized","inherits","prototype","_transform","HashBase.prototype._transform","chunk","encoding","callback","error","update","err","_flush","HashBase.prototype._flush","push","digest","HashBase.prototype.update","data","isBuffer","val","TypeError","Error","from","block","offset","length","i","_update","j","carry","HashBase.prototype._update","HashBase.prototype.digest","_digest","undefined","toString","fill","HashBase.prototype._digest"]
}
