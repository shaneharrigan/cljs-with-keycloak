{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$curve$base.js",
"lineCount":204,
"mappings":"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",
"sources":["node_modules/elliptic/lib/elliptic/curve/base.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$curve$base\"] = function(global,require,module,exports) {\n'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--)\n      nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n      l++;\n    if (i >= 0)\n      l++;\n    acc = acc.dblp(l);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n  points,\n  coeffs,\n  len,\n  jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b], /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3,  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n      bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null,\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles,\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res,\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","BaseCurve","type","conf","p","BN","red","prime","mont","zero","toRed","one","two","n","g","pointFromJSON","gRed","_wnafT1","Array","_wnafT2","_wnafT3","_wnafT4","_bitLength","bitLength","adjustCount","div","cmpn","redN","_maxwellTrick","BasePoint","curve","precomputed","utils","getNAF","getJSF","assert","prototype","point","BaseCurve.prototype.point","Error","validate","BaseCurve.prototype.validate","_fixedNafMul","BaseCurve.prototype._fixedNafMul","k","doubles","_getDoubles","naf","I","step","repr","j","length","nafW","l","push","a","jpoint","b","i","mixedAdd","points","neg","add","toP","_wnafMul","BaseCurve.prototype._wnafMul","nafPoints","_getNAFPoints","w","wnd","acc","dblp","z","_wnafMulAdd","BaseCurve.prototype._wnafMulAdd","defW","coeffs","len","jacobianResult","wndWidth","max","Math","comb","y","cmp","toJ","redNeg","index","jsf","tmp","eq","BasePoint.prototype.eq","BasePoint.prototype.validate","decodePoint","BaseCurve.prototype.decodePoint","bytes","enc","toArray","byteLength","res","slice","pointFromX","encodeCompressed","BasePoint.prototype.encodeCompressed","encode","_encode","BasePoint.prototype._encode","compact","x","getX","getY","isEven","concat","BasePoint.prototype.encode","precompute","BasePoint.prototype.precompute","power","beta","_getBeta","_hasDoubles","BasePoint.prototype._hasDoubles","ceil","BasePoint.prototype._getDoubles","dbl","BasePoint.prototype._getNAFPoints","BasePoint.prototype._getBeta","BasePoint.prototype.dblp","r"]
}
