{
"version":3,
"file":"module$node_modules$asn1_DOT_js$lib$asn1$base$buffer.js",
"lineCount":76,
"mappings":"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",
"sources":["node_modules/asn1_DOT_js/lib/asn1/base/buffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$asn1_DOT_js$lib$asn1$base$buffer\"] = function(global,require,module,exports) {\nvar inherits = require('inherits');\nvar Reporter = require('../base').Reporter;\nvar Buffer = require('buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  var res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n}\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  var res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n}\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n}\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!(item instanceof EncoderBuffer))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = new Buffer(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","DecoderBuffer","base","options","Reporter","call","Buffer","isBuffer","offset","length","error","EncoderBuffer","value","reporter","Array","isArray","map","item","byteLength","inherits","prototype","save","DecoderBuffer.prototype.save","restore","DecoderBuffer.prototype.restore","res","isEmpty","DecoderBuffer.prototype.isEmpty","readUInt8","DecoderBuffer.prototype.readUInt8","fail","skip","DecoderBuffer.prototype.skip","bytes","_reporterState","raw","DecoderBuffer.prototype.raw","slice","join","EncoderBuffer.prototype.join","out","forEach","write","copy"]
}
