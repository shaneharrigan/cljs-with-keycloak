{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$utils.js",
"lineCount":62,
"mappings":"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",
"sources":["node_modules/elliptic/lib/elliptic/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$utils\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  var i;\n  for (i = 0; i < naf.length; i += 1) {\n    naf[i] = 0;\n  }\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n\n};"],
"names":["shadow$provide","global","require","module","exports","BN","minAssert","minUtils","assert","toArray","zero2","toHex","encode","getNAF","num","w","bits","naf","Array","Math","max","bitLength","i","length","ws","k","clone","mod","andln","isOdd","z","isubn","iushrn","getJSF","k1","k2","jsf","d1","d2","m8","cmpn","m14","m24","u1","push","u2","cachedProperty","obj","name","computer","key","prototype","undefined","call","parseBytes","bytes","intFromLE"]
}
