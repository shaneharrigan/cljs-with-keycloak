{
"version":3,
"file":"module$node_modules$readable_stream$lib$_stream_transform.js",
"lineCount":78,
"mappings":"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",
"sources":["node_modules/readable-stream/lib/_stream_transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$readable_stream$lib$_stream_transform\"] = function(global,require,module,exports) {\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","afterTransform","er","data","ts","_transformState","transforming","cb","writecb","emit","Error","writechunk","push","rs","_readableState","reading","needReadable","length","highWaterMark","_read","Transform","options","Duplex","call","bind","needTransform","writeencoding","sync","transform","_transform","flush","_flush","on","prefinish","_this","done","stream","_writableState","util","Object","create","inherits","prototype","Transform.prototype.push","chunk","encoding","Transform.prototype._transform","_write","Transform.prototype._write","Transform.prototype._read","n","_destroy","Transform.prototype._destroy","err","_this2","err2"]
}
