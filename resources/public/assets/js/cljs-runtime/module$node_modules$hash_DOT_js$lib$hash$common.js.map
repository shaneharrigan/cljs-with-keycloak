{
"version":3,
"file":"module$node_modules$hash_DOT_js$lib$hash$common.js",
"lineCount":59,
"mappings":"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",
"sources":["node_modules/hash_DOT_js/lib/hash/common.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$hash_DOT_js$lib$hash$common\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","BlockHash","pending","pendingTotal","blockSize","constructor","outSize","hmacStrength","padLength","endian","_delta8","_delta32","utils","assert","prototype","update","BlockHash.prototype.update","msg","enc","toArray","concat","length","i","r","slice","join32","_update","digest","BlockHash.prototype.digest","_pad","_digest","BlockHash.prototype._pad","len","bytes","k","res","Array","t"]
}
