{
"version":3,
"file":"module$node_modules$public_encrypt$publicEncrypt.js",
"lineCount":49,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,GAAqE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAC7G,MAAIC,YAAYH,OAAA,CAAQ,sCAAR,CAAhB,EACII,cAAcJ,OAAA,CAAQ,yCAAR,CADlB,EAEIK,aAAaL,OAAA,CAAQ,yCAAR,CAFjB,EAGIM,MAAMN,OAAA,CAAQ,wCAAR,CAHV,EAIIO,MAAMP,OAAA,CAAQ,wCAAR,CAJV,EAKIQ,KAAKR,OAAA,CAAQ,8DAAR,CALT,EAMIS,aAAaT,OAAA,CAAQ,+CAAR,CANjB,EAOIU,MAAMV,OAAA,CAAQ,0CAAR,CAPV;AAQIW,WAASX,OAAA,CAAQ,uCAAR,CAAuBW,CAAAA,MARpC;AAUAV,QAAOC,CAAAA,OAAP,GAAiBU,QAAuB,CAACC,SAAD,EAAYC,GAAZ,EAAiBC,OAAjB,CAA0B;AAG9D,QAAAC,UADEH,SAAUG,CAAAA,OAAd,GACYH,SAAUG,CAAAA,OADtB,GAEWD,OAAJ,GACK,CADL,GAGK,CAJV;AAMEE,aAAAA,GAAMd,SAAA,CAAUU,SAAV,CAANI;AAEJ,QAAgB,CAAhB,KAAID,OAAJ,CAAmB;AAoBfE,aAAAA,GAnBeD,SAmBPE,CAAAA,OAAQC,CAAAA,UAAZ,EAAJF;AACJ,UAAIG,OApBoBP,GAoBTQ,CAAAA,MAAf,EACIC,QAAQlB,UAAA,CAAW,MAAX,CAAmBmB,CAAAA,MAAnB,CAA0Bb,MAAOc,CAAAA,KAAP,CAAa,CAAb,CAA1B,CAA2CC,CAAAA,MAA3C,EADZ,EAEIC,OAAOJ,KAAMD,CAAAA,MAFjB,EAGIM,QAAQ,CAARA,GAAYD,IAHhB;AAIA,UAAIN,IAAJ,GAAWH,OAAX,GAAeU,KAAf,GAAuB,CAAvB;AACE,cAAUC,KAAJ,CAAU,kBAAV,CAAN;AADF;AAGIC,WAAAA,GAAKnB,MAAOc,CAAAA,KAAP,CAAaP,OAAb,GAAiBG,IAAjB,GAAwBO,KAAxB,GAAgC,CAAhC,CAALE;AACJ,UAAIC,QAAQb,OAARa,GAAYJ,IAAZI,GAAmB,CAAvB;AACIC,UAAAA,GAAO5B,WAAA,CAAYuB,IAAZ,CAAPK;AACAC,SAAAA,GAAW1B,GAAA,CAAII,MAAOuB,CAAAA,MAAP,CAAc,CAACX,KAAD,EAAQO,KAAR,EAAYnB,MAAOc,CAAAA,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAZ,EA9BTX,GA8BS,CAAd,EAAoDiB,KAApD,CAAJ,EAAgEzB,GAAA,CAAI0B,IAAJ,EAAUD,KAAV,CAAhE,CAAXE;AACAE,UAAAA,GAAa5B,GAAA,CAAIyB,IAAJ,EAAU1B,GAAA,CAAI2B,GAAJ,EAAcN,IAAd,CAAV,CAAbQ;AACJ,SAAA,GAAO,IAAI3B,EAAJ,CAAOG,MAAOuB,CAAAA,MAAP,CAAc,CAACvB,MAAOc,CAAAA,KAAP,CAAa,CAAb,CAAD,EAAkBU,IAAlB,EAA8BF,GAA9B,CAAd,EAAuDf,OAAvD,CAAP,CAAP;AAjCmB,KAAnB,KAEO,KAAgB,CAAhB,KAAIF,OAAJ,CAAmB;AAkCtBK,UAAAA,GAjCqBP,GAiCVQ,CAAAA,MAAXD;AACAH,aAAAA,GAlCgBD,SAkCRE,CAAAA,OAAQC,CAAAA,UAAZ,EAAJF;AACJ,UAAIG,IAAJ,GAAWH,OAAX,GAAe,EAAf;AACE,cAAUW,KAAJ,CAAU,kBAAV,CAAN;AADF;AAIA,UAvC8Bd,OAuC9B;AACO,YAAA,GAAA,MAAA,CAAA,KAAA,CAAA,OAAA,GAAA,IAAA,GAAA,CAAA,EAAA,GAAA,CAAA;AADP,YAAA;AAGO,YAAA,GAAA,OAAA,GAAA,IAAA,GAAA,CAAA;AAKHqB,aAAAA,GAAMzB,MAAO0B,CAAAA,WAAP,CAAmBC,IAAnB,CAANF;AACAG,YAAAA,GAAI,CAAJA;AACAC,aAAAA,GAAQpC,WAAA,CAAkB,CAAlB,GAAYkC,IAAZ,CAARE;AACAC,aAAAA,GAAM,CAANA;AAEJ,aADA,IAAIC,GACJ,EAAOH,IAAP,GAAWD,IAAX,CAAA;AACMG,eAKJ,KALYD,KAAMlB,CAAAA,MAKlB,KAJEkB,KACA,GADQpC,WAAA,CAAkB,CAAlB,GAAYkC,IAAZ,CACR,EAAAG,KAAA,GAAM,CAGR,IADAC,GACA,GADMF,KAAA,CAAMC,KAAA,EAAN,CACN,MACEL,KAAA,CAAIG,IAAA,EAAJ,CADF,GACaG,GADb,CAAA;AANF;AAUA,YAAA,GAAON,KAAP;AAvBA;AAKA,SAAA,GAAO,IAAI5B,EAAJ,CAAOG,MAAOuB,CAAAA,MAAP,CAAc,CAACvB,MAAOgC,CAAAA,IAAP,CAAY,CAAC,CAAD,EA5CX5B,OA4Ce,GAAU,CAAV,GAAc,CAAlB,CAAZ,CAAD,EAAoCe,IAApC,EAAwCnB,MAAOc,CAAAA,KAAP,CAAa,CAAb,CAAxC,EA5CHX,GA4CG,CAAd,EAA6EI,OAA7E,CAAP,CAAP;AA7C0B,KAAnB,KAEA,KAAgB,CAAhB,KAAIF,OAAJ;AAEL,UADA4B,GACI,GADQ,IAAIpC,EAAJ,CAAOM,GAAP,CACR,EAA8B,CAA9B,IAAA8B,GAAUC,CAAAA,GAAV,CAAc5B,SAAIE,CAAAA,OAAlB,CAAJ;AACE,cAAUU,KAAJ,CAAU,2BAAV,CAAN;AADF;AAFK;AAML,YAAUA,KAAJ,CAAU,iBAAV,CAAN;AANK;AAQP,WAAId,OAAJ,GACSL,GAAA,CAAIkC,GAAJ,EAAe3B,SAAf,CADT,GAGSR,UAAA,CAAWmC,GAAX,EAAsB3B,SAAtB,CAHT;AAvBgE,GAAlE;AAX6G,CAA7G;;",
"sources":["node_modules/public-encrypt/publicEncrypt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$public_encrypt$publicEncrypt\"] = function(global,require,module,exports) {\nvar parseKeys = require('parse-asn1')\nvar randomBytes = require('randombytes')\nvar createHash = require('create-hash')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar withPublic = require('./withPublic')\nvar crt = require('browserify-rsa')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function publicEncrypt (publicKey, msg, reverse) {\n  var padding\n  if (publicKey.padding) {\n    padding = publicKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n  var key = parseKeys(publicKey)\n  var paddedMsg\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg)\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    paddedMsg = new BN(msg)\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus')\n    }\n  } else {\n    throw new Error('unknown padding')\n  }\n  if (reverse) {\n    return crt(paddedMsg, key)\n  } else {\n    return withPublic(paddedMsg, key)\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var mLen = msg.length\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  var hLen2 = 2 * hLen\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long')\n  }\n  var ps = Buffer.alloc(k - mLen - hLen2 - 2)\n  var dblen = k - hLen - 1\n  var seed = randomBytes(hLen)\n  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen))\n  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))\n}\nfunction pkcs1 (key, msg, reverse) {\n  var mLen = msg.length\n  var k = key.modulus.byteLength()\n  if (mLen > k - 11) {\n    throw new Error('message too long')\n  }\n  var ps\n  if (reverse) {\n    ps = Buffer.alloc(k - mLen - 3, 0xff)\n  } else {\n    ps = nonZero(k - mLen - 3)\n  }\n  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))\n}\nfunction nonZero (len) {\n  var out = Buffer.allocUnsafe(len)\n  var i = 0\n  var cache = randomBytes(len * 2)\n  var cur = 0\n  var num\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len * 2)\n      cur = 0\n    }\n    num = cache[cur++]\n    if (num) {\n      out[i++] = num\n    }\n  }\n  return out\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseKeys","randomBytes","createHash","mgf","xor","BN","withPublic","crt","Buffer","module.exports","publicKey","msg","reverse","padding","key","k","modulus","byteLength","mLen","length","iHash","update","alloc","digest","hLen","hLen2","Error","ps","dblen","seed","maskedDb","concat","maskedSeed","out","allocUnsafe","len","i","cache","cur","num","from","paddedMsg","cmp"]
}
