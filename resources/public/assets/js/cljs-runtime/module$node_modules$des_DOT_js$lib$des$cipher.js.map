{
"version":3,
"file":"module$node_modules$des_DOT_js$lib$des$cipher.js",
"lineCount":81,
"mappings":"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",
"sources":["node_modules/des_DOT_js/lib/des/cipher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$des_DOT_js$lib$des$cipher\"] = function(global,require,module,exports) {\n'use strict';\n\nvar assert = require('minimalistic-assert');\n\nfunction Cipher(options) {\n  this.options = options;\n\n  this.type = this.options.type;\n  this.blockSize = 8;\n  this._init();\n\n  this.buffer = new Array(this.blockSize);\n  this.bufferOff = 0;\n  this.padding = options.padding !== false\n}\nmodule.exports = Cipher;\n\nCipher.prototype._init = function _init() {\n  // Might be overrided\n};\n\nCipher.prototype.update = function update(data) {\n  if (data.length === 0)\n    return [];\n\n  if (this.type === 'decrypt')\n    return this._updateDecrypt(data);\n  else\n    return this._updateEncrypt(data);\n};\n\nCipher.prototype._buffer = function _buffer(data, off) {\n  // Append data to buffer\n  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);\n  for (var i = 0; i < min; i++)\n    this.buffer[this.bufferOff + i] = data[off + i];\n  this.bufferOff += min;\n\n  // Shift next\n  return min;\n};\n\nCipher.prototype._flushBuffer = function _flushBuffer(out, off) {\n  this._update(this.buffer, 0, out, off);\n  this.bufferOff = 0;\n  return this.blockSize;\n};\n\nCipher.prototype._updateEncrypt = function _updateEncrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;\n  var out = new Array(count * this.blockSize);\n\n  if (this.bufferOff !== 0) {\n    inputOff += this._buffer(data, inputOff);\n\n    if (this.bufferOff === this.buffer.length)\n      outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Write blocks\n  var max = data.length - ((data.length - inputOff) % this.blockSize);\n  for (; inputOff < max; inputOff += this.blockSize) {\n    this._update(data, inputOff, out, outputOff);\n    outputOff += this.blockSize;\n  }\n\n  // Queue rest\n  for (; inputOff < data.length; inputOff++, this.bufferOff++)\n    this.buffer[this.bufferOff] = data[inputOff];\n\n  return out;\n};\n\nCipher.prototype._updateDecrypt = function _updateDecrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;\n  var out = new Array(count * this.blockSize);\n\n  // TODO(indutny): optimize it, this is far from optimal\n  for (; count > 0; count--) {\n    inputOff += this._buffer(data, inputOff);\n    outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Buffer rest of the input\n  inputOff += this._buffer(data, inputOff);\n\n  return out;\n};\n\nCipher.prototype.final = function final(buffer) {\n  var first;\n  if (buffer)\n    first = this.update(buffer);\n\n  var last;\n  if (this.type === 'encrypt')\n    last = this._finalEncrypt();\n  else\n    last = this._finalDecrypt();\n\n  if (first)\n    return first.concat(last);\n  else\n    return last;\n};\n\nCipher.prototype._pad = function _pad(buffer, off) {\n  if (off === 0)\n    return false;\n\n  while (off < buffer.length)\n    buffer[off++] = 0;\n\n  return true;\n};\n\nCipher.prototype._finalEncrypt = function _finalEncrypt() {\n  if (!this._pad(this.buffer, this.bufferOff))\n    return [];\n\n  var out = new Array(this.blockSize);\n  this._update(this.buffer, 0, out, 0);\n  return out;\n};\n\nCipher.prototype._unpad = function _unpad(buffer) {\n  return buffer;\n};\n\nCipher.prototype._finalDecrypt = function _finalDecrypt() {\n  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');\n  var out = new Array(this.blockSize);\n  this._flushBuffer(out, 0);\n\n  return this._unpad(out);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Cipher","options","type","blockSize","_init","buffer","Array","bufferOff","padding","assert","prototype","Cipher.prototype._init","update","Cipher.prototype.update","data","length","_updateDecrypt","_updateEncrypt","_buffer","Cipher.prototype._buffer","off","min","Math","i","_flushBuffer","Cipher.prototype._flushBuffer","out","_update","Cipher.prototype._updateEncrypt","inputOff","outputOff","max","Cipher.prototype._updateDecrypt","count","ceil","final","Cipher.prototype.final","first","last","_finalEncrypt","_finalDecrypt","concat","_pad","Cipher.prototype._pad","Cipher.prototype._finalEncrypt","_unpad","Cipher.prototype._unpad","Cipher.prototype._finalDecrypt","equal"]
}
