{
"version":3,
"file":"module$node_modules$asn1_DOT_js$lib$asn1$decoders$pem.js",
"lineCount":38,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,GAA0E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAMlHC,UAASA,WAAU,CAACC,MAAD,CAAS;AAC1BC,cAAWC,CAAAA,IAAX,CAAgB,IAAhB,EAAsBF,MAAtB,CAAA;AACA,QAAKG,CAAAA,GAAL,GAAW,KAAX;AAF0B;AALxBC,QAAAA,GAAWR,OAAA,CAAQ,+CAAR,CAAXQ;AACJ,MAAIC,SAAST,OAAA,CAAQ,kCAAR,CAAkBS,CAAAA,MAA/B,EAEIJ,aAAaL,OAAA,CAAQ,uDAAR,CAFjB;AAQAQ,QAAA,CAASL,UAAT,EAAqBE,UAArB,CAAA;AACAJ,QAAOC,CAAAA,OAAP,GAAiBC,UAAjB;AAEAA,YAAWO,CAAAA,SAAUC,CAAAA,MAArB,GAA8BC,QAAe,CAACC,IAAD,EAAOC,OAAP,CAAgB;AACvDC,QAAAA,GAAQF,IAAKG,CAAAA,QAAL,EAAgBC,CAAAA,KAAhB,CAAsB,UAAtB,CAARF;AAOJ,SALA,IAAIG,QAAQJ,OAAQI,CAAAA,KAAMC,CAAAA,WAAd,EAAZ,EAEIC,KAAK,iCAFT,EAGIC,QAAQ,CAAC,CAHb,EAIIC,MAAM,CAAC,CAJX,EAKSC,IAAI,CAAb,EAAgBA,CAAhB,GAAoBR,IAAMS,CAAAA,MAA1B,EAAkCD,CAAA,EAAlC,CAAuC;AACrC,UAAIE,QAAQV,IAAA,CAAMQ,CAAN,CAASE,CAAAA,KAAT,CAAeL,EAAf,CAAZ;AACA,UAAc,IAAd,KAAIK,KAAJ,IAGIA,KAAA,CAAM,CAAN,CAHJ,KAGiBP,KAHjB;AAMA,YAAc,CAAC,CAAf,KAAIG,KAAJ,CAAkB;AAChB,cAAiB,OAAjB,KAAII,KAAA,CAAM,CAAN,CAAJ;AACE;AADF;AAEAJ,eAAA,GAAQE,CAAR;AAHgB,SAAlB,KAIO;AACL,cAAiB,KAAjB,KAAIE,KAAA,CAAM,CAAN,CAAJ;AACE;AADF;AAEAH,aAAA,GAAMC,CAAN;AACA;AAJK;AAVP;AAFqC;AAmBvC,QAAc,CAAC,CAAf,KAAIF,KAAJ,IAA4B,CAAC,CAA7B,KAAoBC,GAApB;AACE,YAAUI,KAAJ,CAAU,6BAAV,GAA0CR,KAA1C,CAAN;AADF;AAGIS,QAAAA,GAASZ,IAAMa,CAAAA,KAAN,CAAYP,KAAZ,GAAoB,CAApB,EAAuBC,GAAvB,CAA4BO,CAAAA,IAA5B,CAAiC,EAAjC,CAATF;AAEJA,QAAOG,CAAAA,OAAP,CAAe,mBAAf,EAAoC,EAApC,CAAA;AAEIC,QAAAA,GAAQ,IAAItB,MAAJ,CAAWkB,IAAX,EAAmB,QAAnB,CAARI;AACJ,WAAO1B,UAAWK,CAAAA,SAAUC,CAAAA,MAAOL,CAAAA,IAA5B,CAAiC,IAAjC,EAAuCyB,IAAvC,EAA8CjB,OAA9C,CAAP;AAnC2D,GAA7D;AAbkH,CAAlH;;",
"sources":["node_modules/asn1_DOT_js/lib/asn1/decoders/pem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$asn1_DOT_js$lib$asn1$decoders$pem\"] = function(global,require,module,exports) {\nvar inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n\n  var label = options.label.toUpperCase();\n\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  var base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","PEMDecoder","entity","DERDecoder","call","enc","inherits","Buffer","prototype","decode","PEMDecoder.prototype.decode","data","options","lines","toString","split","label","toUpperCase","re","start","end","i","length","match","Error","base64","slice","join","replace","input"]
}
