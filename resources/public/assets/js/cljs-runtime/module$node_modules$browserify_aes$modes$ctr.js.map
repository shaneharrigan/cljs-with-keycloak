{
"version":3,
"file":"module$node_modules$browserify_aes$modes$ctr.js",
"lineCount":22,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,GAAiE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACzG,MAAIC,MAAMH,OAAA,CAAQ,sCAAR,CAAV,EACII,SAASJ,OAAA,CAAQ,uCAAR,CAAuBI,CAAAA,MADpC,EAEIC,SAASL,OAAA,CAAQ,2CAAR,CAFb;AAWAE,SAAQI,CAAAA,OAAR,GAAkBC,QAAS,CAACC,IAAD,EAAOC,KAAP,CAAc;AACvC,QAAIC,WAAWC,IAAKC,CAAAA,IAAL,CAAUH,KAAMI,CAAAA,MAAhB,GAFDC,EAEC,CAAf,EACIC,QAAQP,IAAKQ,CAAAA,MAAOH,CAAAA,MADxB;AAEAL,QAAKQ,CAAAA,MAAL,GAAcZ,MAAOa,CAAAA,MAAP,CAAc,CAC1BT,IAAKQ,CAAAA,MADqB,EAE1BZ,MAAOc,CAAAA,WAAP,CANYJ,EAMZ,GAAmBJ,QAAnB,CAF0B,CAAd,CAAd;AAIA,SAAK,IAAIS,IAAI,CAAb,EAAgBA,CAAhB,GAAoBT,QAApB,EAA8BS,CAAA,EAA9B,CAAmC;AACdX,UAAAA,MAAAA,IAAAA;AAdrB,UAAIY,eAAMZ,GAAKa,CAAAA,OAAQC,CAAAA,eAAb,CAA6Bd,GAAKe,CAAAA,KAAlC,CAAV;AACAlB,YAAA,CAAOG,GAAKe,CAAAA,KAAZ,CAAA;AACA,SAAA,GAAOH,YAAP;AAaMI,kBAAAA,GAAST,KAATS,GAVQV,EAURU,GAAiBL,CAAjBK;AACJhB,UAAKQ,CAAAA,MAAOS,CAAAA,aAAZ,CAA0BL,GAAA,CAAI,CAAJ,CAA1B,EAAkCI,YAAlC,GAA2C,CAA3C,CAAA;AACAhB,UAAKQ,CAAAA,MAAOS,CAAAA,aAAZ,CAA0BL,GAAA,CAAI,CAAJ,CAA1B,EAAkCI,YAAlC,GAA2C,CAA3C,CAAA;AACAhB,UAAKQ,CAAAA,MAAOS,CAAAA,aAAZ,CAA0BL,GAAA,CAAI,CAAJ,CAA1B,EAAkCI,YAAlC,GAA2C,CAA3C,CAAA;AACAhB,UAAKQ,CAAAA,MAAOS,CAAAA,aAAZ,CAA0BL,GAAA,CAAI,CAAJ,CAA1B,EAAkCI,YAAlC,GAA2C,EAA3C,CAAA;AANiC;AAQ/BE,YAAAA,GAAMlB,IAAKQ,CAAAA,MAAOW,CAAAA,KAAZ,CAAkB,CAAlB,EAAqBlB,KAAMI,CAAAA,MAA3B,CAANa;AACJlB,QAAKQ,CAAAA,MAAL,GAAcR,IAAKQ,CAAAA,MAAOW,CAAAA,KAAZ,CAAkBlB,KAAMI,CAAAA,MAAxB,CAAd;AACA,WAAOV,GAAA,CAAIM,KAAJ,EAAWiB,QAAX,CAAP;AAjBuC,GAAzC;AAZyG,CAAzG;;",
"sources":["node_modules/browserify-aes/modes/ctr.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$browserify_aes$modes$ctr\"] = function(global,require,module,exports) {\nvar xor = require('buffer-xor')\nvar Buffer = require('safe-buffer').Buffer\nvar incr32 = require('../incr32')\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlockRaw(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nvar blockSize = 16\nexports.encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / blockSize)\n  var start = self._cache.length\n  self._cache = Buffer.concat([\n    self._cache,\n    Buffer.allocUnsafe(chunkNum * blockSize)\n  ])\n  for (var i = 0; i < chunkNum; i++) {\n    var out = getBlock(self)\n    var offset = start + i * blockSize\n    self._cache.writeUInt32BE(out[0], offset + 0)\n    self._cache.writeUInt32BE(out[1], offset + 4)\n    self._cache.writeUInt32BE(out[2], offset + 8)\n    self._cache.writeUInt32BE(out[3], offset + 12)\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","xor","Buffer","incr32","encrypt","exports.encrypt","self","chunk","chunkNum","Math","ceil","length","blockSize","start","_cache","concat","allocUnsafe","i","out","_cipher","encryptBlockRaw","_prev","offset","writeUInt32BE","pad","slice"]
}
