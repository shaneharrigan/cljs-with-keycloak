{
"version":3,
"file":"module$node_modules$diffie_hellman$lib$generatePrime.js",
"lineCount":68,
"mappings":"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",
"sources":["node_modules/diffie-hellman/lib/generatePrime.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$diffie_hellman$lib$generatePrime\"] = function(global,require,module,exports) {\nvar randomBytes = require('randombytes');\nmodule.exports = findPrime;\nfindPrime.simpleSieve = simpleSieve;\nfindPrime.fermatTest = fermatTest;\nvar BN = require('bn.js');\nvar TWENTYFOUR = new BN(24);\nvar MillerRabin = require('miller-rabin');\nvar millerRabin = new MillerRabin();\nvar ONE = new BN(1);\nvar TWO = new BN(2);\nvar FIVE = new BN(5);\nvar SIXTEEN = new BN(16);\nvar EIGHT = new BN(8);\nvar TEN = new BN(10);\nvar THREE = new BN(3);\nvar SEVEN = new BN(7);\nvar ELEVEN = new BN(11);\nvar FOUR = new BN(4);\nvar TWELVE = new BN(12);\nvar primes = null;\n\nfunction _getPrimes() {\n  if (primes !== null)\n    return primes;\n\n  var limit = 0x100000;\n  var res = [];\n  res[0] = 2;\n  for (var i = 1, k = 3; k < limit; k += 2) {\n    var sqrt = Math.ceil(Math.sqrt(k));\n    for (var j = 0; j < i && res[j] <= sqrt; j++)\n      if (k % res[j] === 0)\n        break;\n\n    if (i !== j && res[j] <= sqrt)\n      continue;\n\n    res[i++] = k;\n  }\n  primes = res;\n  return res;\n}\n\nfunction simpleSieve(p) {\n  var primes = _getPrimes();\n\n  for (var i = 0; i < primes.length; i++)\n    if (p.modn(primes[i]) === 0) {\n      if (p.cmpn(primes[i]) === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  return true;\n}\n\nfunction fermatTest(p) {\n  var red = BN.mont(p);\n  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n}\n\nfunction findPrime(bits, gen) {\n  if (bits < 16) {\n    // this is what openssl does\n    if (gen === 2 || gen === 5) {\n      return new BN([0x8c, 0x7b]);\n    } else {\n      return new BN([0x8c, 0x27]);\n    }\n  }\n  gen = new BN(gen);\n\n  var num, n2;\n\n  while (true) {\n    num = new BN(randomBytes(Math.ceil(bits / 8)));\n    while (num.bitLength() > bits) {\n      num.ishrn(1);\n    }\n    if (num.isEven()) {\n      num.iadd(ONE);\n    }\n    if (!num.testn(1)) {\n      num.iadd(TWO);\n    }\n    if (!gen.cmp(TWO)) {\n      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {\n        num.iadd(FOUR);\n      }\n    } else if (!gen.cmp(FIVE)) {\n      while (num.mod(TEN).cmp(THREE)) {\n        num.iadd(FOUR);\n      }\n    }\n    n2 = num.shrn(1);\n    if (simpleSieve(n2) && simpleSieve(num) &&\n      fermatTest(n2) && fermatTest(num) &&\n      millerRabin.test(n2) && millerRabin.test(num)) {\n      return num;\n    }\n  }\n\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","simpleSieve","p","primes","res","i","k","limit","sqrt","Math","ceil","j","length","modn","cmpn","fermatTest","red","BN","mont","TWO","toRed","redPow","subn","fromRed","findPrime","bits","gen","num","n2","randomBytes","bitLength","ishrn","isEven","iadd","ONE","testn","cmp","mod","TWENTYFOUR","ELEVEN","FOUR","FIVE","TEN","THREE","shrn","millerRabin","test","MillerRabin"]
}
