{
"version":3,
"file":"module$node_modules$evp_bytestokey$index.js",
"lineCount":28,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,GAA6D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACrG,MAAIC,SAASH,OAAA,CAAQ,uCAAR,CAAuBG,CAAAA,MAApC,EACIC,MAAMJ,OAAA,CAAQ,sCAAR,CADV;AA4CAC,QAAOC,CAAAA,OAAP,GAxCAG,QAAwB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,OAAjB,EAA0BC,KAA1B,CAAiC;AAClDN,UAAOO,CAAAA,QAAP,CAAgBJ,QAAhB,CAAL,KAAgCA,QAAhC,GAA2CH,MAAOQ,CAAAA,IAAP,CAAYL,QAAZ,EAAsB,QAAtB,CAA3C;AACA,QAAIC,IAAJ,KACOJ,MAAOO,CAAAA,QAAP,CAAgBH,IAAhB,CACD,KADwBA,IACxB,GAD+BJ,MAAOQ,CAAAA,IAAP,CAAYJ,IAAZ,EAAkB,QAAlB,CAC/B,GAAgB,CAAhB,KAAAA,IAAKK,CAAAA,MAFX;AAEyB,YAAM,IAAIC,UAAJ,CAAe,0CAAf,CAAN;AAFzB;AAKaL,WAATM,IAAmB,CAAnBA;AAKJ,SAJA,IAAIC,MAAMZ,MAAOa,CAAAA,KAAP,CAAaF,OAAb,CAAV,EACIG,KAAKd,MAAOa,CAAAA,KAAP,CAAaP,KAAb,IAAsB,CAAtB,CADT,EAEIS,MAAMf,MAAOa,CAAAA,KAAP,CAAa,CAAb,CAEV,EAAgB,CAAhB,GAAOF,OAAP,IAA6B,CAA7B,GAAqBL,KAArB,CAAA,CAAgC;AAC9B,UAAIU,OAAO,IAAIf,GAAJ,EAAX;AACAe,UAAKC,CAAAA,MAAL,CAAYF,GAAZ,CAAA;AACAC,UAAKC,CAAAA,MAAL,CAAYd,QAAZ,CAAA;AACIC,UAAJ,IAAUY,IAAKC,CAAAA,MAAL,CAAYb,IAAZ,CAAV;AACAW,SAAA,GAAMC,IAAKE,CAAAA,MAAL,EAAN;AAEIC,UAAAA,GAAO,CAAPA;AAEJ,UAAa,CAAb,GAAIR,OAAJ,CAAgB;AACd,YAAIS,WAAWR,GAAIH,CAAAA,MAAfW,GAAwBT,OAA5B;AACAQ,YAAA,GAAOE,IAAKC,CAAAA,GAAL,CAASX,OAAT,EAAiBI,GAAIN,CAAAA,MAArB,CAAP;AACAM,WAAIQ,CAAAA,IAAJ,CAASX,GAAT,EAAcQ,QAAd,EAAwB,CAAxB,EAA2BD,IAA3B,CAAA;AACAR,eAAA,IAAUQ,IAAV;AAJc;AAOZA,UAAJ,GAAWJ,GAAIN,CAAAA,MAAf,IAAiC,CAAjC,GAAyBH,KAAzB,KAEMG,QAEJ,GAFaY,IAAKC,CAAAA,GAAL,CAAShB,KAAT,EAAgBS,GAAIN,CAAAA,MAApB,GAA6BU,IAA7B,CAEb,EADAJ,GAAIQ,CAAAA,IAAJ,CAAST,EAAT,EAFcA,EAAGL,CAAAA,MAEjB,GAF0BH,KAE1B,EAAsBa,IAAtB,EAA4BA,IAA5B,GAAmCV,QAAnC,CACA,EAAAH,KAAA,IAASG,QAJX;AAhB8B;AAwBhCM,OAAIS,CAAAA,IAAJ,CAAS,CAAT,CAAA;AACA,WAAO,CAAOZ,GAAP,EAAgBE,EAAhB,CAAP;AArCuD,GAwCzD;AA7CqG,CAArG;;",
"sources":["node_modules/evp_bytestokey/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$evp_bytestokey$index\"] = function(global,require,module,exports) {\nvar Buffer = require('safe-buffer').Buffer\nvar MD5 = require('md5.js')\n\n/* eslint-disable camelcase */\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\n  if (salt) {\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\n  }\n\n  var keyLen = keyBits / 8\n  var key = Buffer.alloc(keyLen)\n  var iv = Buffer.alloc(ivLen || 0)\n  var tmp = Buffer.alloc(0)\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new MD5()\n    hash.update(tmp)\n    hash.update(password)\n    if (salt) hash.update(salt)\n    tmp = hash.digest()\n\n    var used = 0\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen\n      used = Math.min(keyLen, tmp.length)\n      tmp.copy(key, keyStart, 0, used)\n      keyLen -= used\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen\n      var length = Math.min(ivLen, tmp.length - used)\n      tmp.copy(iv, ivStart, used, used + length)\n      ivLen -= length\n    }\n  }\n\n  tmp.fill(0)\n  return { key: key, iv: iv }\n}\n\nmodule.exports = EVP_BytesToKey\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","MD5","EVP_BytesToKey","password","salt","keyBits","ivLen","isBuffer","from","length","RangeError","keyLen","key","alloc","iv","tmp","hash","update","digest","used","keyStart","Math","min","copy","fill"]
}
