shadow$provide.module$node_modules$diffie_hellman$lib$dh = function(global, require, module, exports) {
  function setPublicKey(pub, enc) {
    enc = enc || "utf8";
    Buffer.isBuffer(pub) || (pub = new Buffer(pub, enc));
    this._pub = new BN(pub);
    return this;
  }
  function setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    Buffer.isBuffer(priv) || (priv = new Buffer(priv, enc));
    this._priv = new BN(priv);
    return this;
  }
  function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._primeCode = this._priv = this._pub = void 0;
    malleable ? (this.setPublicKey = setPublicKey, this.setPrivateKey = setPrivateKey) : this._primeCode = 8;
  }
  function formatReturnValue(bn, enc) {
    bn = new Buffer(bn.toArray());
    return enc ? bn.toString(enc) : bn;
  }
  var Buffer = require("module$node_modules$buffer$index").Buffer, BN = require("module$node_modules$diffie_hellman$node_modules$bn_js$lib$bn"), millerRabin = new (require("module$node_modules$miller_rabin$lib$mr"))(), TWENTYFOUR = new BN(24), ELEVEN = new BN(11), TEN = new BN(10), THREE = new BN(3), SEVEN = new BN(7), primes = require("module$node_modules$diffie_hellman$lib$generatePrime"), randomBytes = require("module$node_modules$randombytes$browser");
  module.exports = DH;
  var primeCache = {};
  Object.defineProperty(DH.prototype, "verifyError", {enumerable:!0, get:function() {
    if ("number" !== typeof this._primeCode) {
      var prime = this.__prime, gen = this.__gen.toString("hex");
      var JSCompiler_inline_result = [gen, prime.toString(16)].join("_");
      if (JSCompiler_inline_result in primeCache) {
        JSCompiler_inline_result = primeCache[JSCompiler_inline_result];
      } else {
        var error = 0;
        if (!prime.isEven() && primes.simpleSieve && primes.fermatTest(prime) && millerRabin.test(prime)) {
          switch(millerRabin.test(prime.shrn(1)) || (error += 2), gen) {
            case "02":
              prime.mod(TWENTYFOUR).cmp(ELEVEN) && (error += 8);
              break;
            case "05":
              prime = prime.mod(TEN);
              prime.cmp(THREE) && prime.cmp(SEVEN) && (error += 8);
              break;
            default:
              error += 4;
          }
        } else {
          error += 1, error = "02" === gen || "05" === gen ? error + 8 : error + 4;
        }
        JSCompiler_inline_result = primeCache[JSCompiler_inline_result] = error;
      }
      this._primeCode = JSCompiler_inline_result;
    }
    return this._primeCode;
  }});
  DH.prototype.generateKeys = function() {
    this._priv || (this._priv = new BN(randomBytes(this._primeLen)));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
  };
  DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    other = other.redPow(this._priv).fromRed();
    other = new Buffer(other.toArray());
    var prime = this.getPrime();
    other.length < prime.length && (prime = new Buffer(prime.length - other.length), prime.fill(0), other = Buffer.concat([prime, other]));
    return other;
  };
  DH.prototype.getPublicKey = function(enc) {
    return formatReturnValue(this._pub, enc);
  };
  DH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this._priv, enc);
  };
  DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
  };
  DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
  };
  DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    Buffer.isBuffer(gen) || (gen = new Buffer(gen, enc));
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
  };
};

//# sourceMappingURL=module$node_modules$diffie_hellman$lib$dh.js.map
