shadow$provide.module$node_modules$randombytes$browser = function(global, require, module, exports) {
  function oldBrowser() {
    throw Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
  }
  function randomBytes(size, cb) {
    if (4294967295 < size) {
      throw new RangeError("requested too many random bytes");
    }
    var bytes = Buffer.allocUnsafe(size);
    if (0 < size) {
      if (65536 < size) {
        for (var generated = 0; generated < size; generated += 65536) {
          crypto.getRandomValues(bytes.slice(generated, generated + 65536));
        }
      } else {
        crypto.getRandomValues(bytes);
      }
    }
    return "function" === typeof cb ? process.nextTick(function() {
      cb(null, bytes);
    }) : bytes;
  }
  var process = require("module$node_modules$process$browser");
  "use strict";
  var Buffer = require("module$node_modules$safe_buffer$index").Buffer, crypto = global.crypto || global.msCrypto;
  module.exports = crypto && crypto.getRandomValues ? randomBytes : oldBrowser;
};

//# sourceMappingURL=module$node_modules$randombytes$browser.js.map
