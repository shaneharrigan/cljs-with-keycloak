{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$eddsa$index.js",
"lineCount":70,
"mappings":"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",
"sources":["node_modules/elliptic/lib/elliptic/eddsa/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$eddsa$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n    .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","EDDSA","curve","assert","curves","g","precompute","n","bitLength","pointClass","point","constructor","encodingLength","Math","ceil","hash","sha512","utils","parseBytes","KeyPair","Signature","prototype","sign","EDDSA.prototype.sign","message","secret","key","keyFromSecret","r","hashInt","messagePrefix","R","mul","Rencoded","encodePoint","s_","pubBytes","priv","S","add","umod","makeSignature","verify","EDDSA.prototype.verify","sig","pub","keyFromPublic","h","SG","RplusAh","eq","EDDSA.prototype.hashInt","i","arguments","length","update","intFromLE","digest","EDDSA.prototype.keyFromPublic","fromPublic","EDDSA.prototype.keyFromSecret","fromSecret","EDDSA.prototype.makeSignature","EDDSA.prototype.encodePoint","enc","getY","toArray","getX","isOdd","decodePoint","EDDSA.prototype.decodePoint","bytes","lastIx","normed","slice","concat","xIsOdd","y","pointFromY","encodeInt","EDDSA.prototype.encodeInt","num","decodeInt","EDDSA.prototype.decodeInt","isPoint","EDDSA.prototype.isPoint","val"]
}
