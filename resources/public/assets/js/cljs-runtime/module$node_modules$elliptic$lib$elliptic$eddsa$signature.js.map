{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$eddsa$signature.js",
"lineCount":35,
"mappings":"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",
"sources":["node_modules/elliptic/lib/elliptic/eddsa/signature.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$eddsa$signature\"] = function(global,require,module,exports) {\n'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength),\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Signature","eddsa","sig","parseBytes","Array","isArray","R","slice","encodingLength","S","assert","isPoint","_R","BN","_S","_Rencoded","Rencoded","_Sencoded","Sencoded","utils","cachedProperty","decodeInt","decodePoint","encodePoint","encodeInt","prototype","toBytes","Signature.prototype.toBytes","concat","toHex","Signature.prototype.toHex","encode","toUpperCase"]
}
