{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$ec$key.js",
"lineCount":49,
"mappings":"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",
"sources":["node_modules/elliptic/lib/elliptic/ec/key.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$ec$key\"] = function(global,require,module,exports) {\n'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc,\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc,\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  if(!pub.validate()) {\n    assert(pub.validate(), 'public point not validated');\n  }\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","KeyPair","ec","options","pub","priv","_importPrivate","privEnc","_importPublic","pubEnc","BN","assert","utils","fromPublic","KeyPair.fromPublic","enc","fromPrivate","KeyPair.fromPrivate","prototype","validate","KeyPair.prototype.validate","getPublic","isInfinity","result","reason","mul","curve","n","KeyPair.prototype.getPublic","compact","g","encode","getPrivate","KeyPair.prototype.getPrivate","toString","KeyPair.prototype._importPrivate","key","umod","KeyPair.prototype._importPublic","x","y","type","point","decodePoint","derive","KeyPair.prototype.derive","getX","sign","KeyPair.prototype.sign","msg","verify","KeyPair.prototype.verify","signature","inspect","KeyPair.prototype.inspect"]
}
