{
"version":3,
"file":"module$node_modules$crypto_browserify$index.js",
"lineCount":50,
"mappings":"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",
"sources":["node_modules/crypto-browserify/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_browserify$index\"] = function(global,require,module,exports) {\n'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","randomBytes","rng","pseudoRandomBytes","prng","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","exports.getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","exports.createCredentials","Error","constants"]
}
